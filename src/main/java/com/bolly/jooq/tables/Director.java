/**
 * This class is generated by jOOQ
 */
package com.bolly.jooq.tables;


import com.bolly.jooq.Bolly;
import com.bolly.jooq.Keys;
import com.bolly.jooq.tables.records.DirectorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Director extends TableImpl<DirectorRecord> {

    private static final long serialVersionUID = 1048144185;

    /**
     * The reference instance of <code>bolly.DIRECTOR</code>
     */
    public static final Director DIRECTOR = new Director();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DirectorRecord> getRecordType() {
        return DirectorRecord.class;
    }

    /**
     * The column <code>bolly.DIRECTOR.id</code>.
     */
    public final TableField<DirectorRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>bolly.DIRECTOR.name</code>.
     */
    public final TableField<DirectorRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>bolly.DIRECTOR.highest_rated_movie</code>.
     */
    public final TableField<DirectorRecord, String> HIGHEST_RATED_MOVIE = createField("highest_rated_movie", org.jooq.impl.SQLDataType.VARCHAR.length(32), this, "");

    /**
     * Create a <code>bolly.DIRECTOR</code> table reference
     */
    public Director() {
        this("DIRECTOR", null);
    }

    /**
     * Create an aliased <code>bolly.DIRECTOR</code> table reference
     */
    public Director(String alias) {
        this(alias, DIRECTOR);
    }

    private Director(String alias, Table<DirectorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Director(String alias, Table<DirectorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Bolly.BOLLY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DirectorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIRECTOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DirectorRecord> getPrimaryKey() {
        return Keys.KEY_DIRECTOR_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DirectorRecord>> getKeys() {
        return Arrays.<UniqueKey<DirectorRecord>>asList(Keys.KEY_DIRECTOR_PRIMARY, Keys.KEY_DIRECTOR_DIR_NAME_UNIQ);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Director as(String alias) {
        return new Director(alias, this);
    }

    /**
     * Rename this table
     */
    public Director rename(String name) {
        return new Director(name, null);
    }
}
